#include "grammeme.h"

#include <vector>
#include <map>
#include <iostream>

namespace linguistic_processor {
namespace morphological_analysis {

namespace {

struct GrammemeStorage {
    std::string parent;
    std::string name;
    std::string alias;
    std::string description;
};

const std::vector<GrammemeStorage> STORAGE = {
    { "", "post", "чр", "часть речи" },
    { "post", "noun", "сущ", "имя существительное" },
    { "post", "adjf", "прил", "имя прилагательное (полное)" },
    { "post", "adjs", "кр_прил", "имя прилагательное (краткое)" },
    { "post", "comp", "комп", "компаратив" },
    { "post", "verb", "гл", "глагол (личная форма)" },
    { "post", "infn", "инф", "глагол (инфинитив)" },
    { "post", "prtf", "прич", "причастие (полное)" },
    { "post", "prts", "кр_прич", "причастие (краткое)" },
    { "post", "grnd", "деепр", "деепричастие" },
    { "post", "numr", "числ", "числительное" },
    { "post", "advb", "н", "наречие" },
    { "post", "npro", "мс", "местоимение-существительное" },
    { "post", "pred", "предк", "предикатив" },
    { "post", "prep", "пр", "предлог" },
    { "post", "conj", "союз", "союз" },
    { "post", "prcl", "част", "частица" },
    { "post", "intj", "межд", "междометие" },
    { "", "anim", "од-неод", "одушевлённость / одушевлённость не выражена" },
    { "anim", "anim", "од", "одушевлённое" },
    { "anim", "inan", "неод", "неодушевлённое" },
    { "", "gndr", "хр", "род / род не выражен" },
    { "ms-f", "masc", "мр", "мужской род" },
    { "ms-f", "femn", "жр", "женский род" },
    { "gndr", "neut", "ср", "средний род" },
    { "gndr", "ms-f", "ор", "общий род" },
    { "", "nmbr", "число", "число" },
    { "nmbr", "sing", "ед", "единственное число" },
    { "nmbr", "plur", "мн", "множественное число" },
    { "", "sgtm", "sg", "singularia tantum" },
    { "", "pltm", "pl", "pluralia tantum" },
    { "", "fixd", "0", "неизменяемое" },
    { "", "case", "падеж", "категория падежа" },
    { "case", "nomn", "им", "именительный падеж" },
    { "case", "gent", "рд", "родительный падеж" },
    { "case", "datv", "дт", "дательный падеж" },
    { "case", "accs", "вн", "винительный падеж" },
    { "case", "ablt", "тв", "творительный падеж" },
    { "case", "loct", "пр", "предложный падеж" },
    { "nomn", "voct", "зв", "звательный падеж" },
    { "gent", "gen1", "рд1", "первый родительный падеж" },
    { "gent", "gen2", "рд2", "второй родительный (частичный) падеж" },
    { "accs", "acc2", "вн2", "второй винительный падеж" },
    { "loct", "loc1", "пр1", "первый предложный падеж" },
    { "loct", "loc2", "пр2", "второй предложный (местный) падеж" },
    { "", "abbr", "аббр", "аббревиатура" },
    { "", "name", "имя", "имя" },
    { "", "surn", "фам", "фамилия" },
    { "", "patr", "отч", "отчество" },
    { "", "geox", "гео", "топоним" },
    { "", "orgn", "орг", "организация" },
    { "", "trad", "tm", "торговая марка" },
    { "", "subx", "субст?", "возможна субстантивация" },
    { "", "supr", "превосх", "превосходная степень" },
    { "", "qual", "кач", "качественное" },
    { "", "apro", "мест-п", "местоименное" },
    { "", "anum", "числ-п", "порядковое" },
    { "", "poss", "притяж", "притяжательное" },
    { "", "v-ey", "*ею", "форма на -ею" },
    { "", "v-oy", "*ою", "форма на -ою" },
    { "", "cmp2", "сравн2", "сравнительная степень на по-" },
    { "", "v-ej", "*ей", "форма компаратива на -ей" },
    { "", "aspc", "вид", "категория вида" },
    { "aspc", "perf", "сов", "совершенный вид" },
    { "aspc", "impf", "несов", "несовершенный вид" },
    { "", "trns", "перех", "категория переходности" },
    { "trns", "tran", "перех", "переходный" },
    { "trns", "intr", "неперех", "непереходный" },
    { "", "impe", "безл", "безличный" },
    { "", "impx", "безл?", "возможно безличное употребление" },
    { "", "mult", "мног", "многократный" },
    { "", "refl", "возвр", "возвратный" },
    { "", "pers", "лицо", "категория лица" },
    { "pers", "1per", "1л", "1 лицо" },
    { "pers", "2per", "2л", "2 лицо" },
    { "pers", "3per", "3л", "3 лицо" },
    { "", "tens", "время", "категория времени" },
    { "tens", "pres", "наст", "настоящее время" },
    { "tens", "past", "прош", "прошедшее время" },
    { "tens", "futr", "буд", "будущее время" },
    { "", "mood", "накл", "категория наклонения" },
    { "mood", "indc", "изъяв", "изъявительное наклонение" },
    { "mood", "impr", "повел", "повелительное наклонение" },
    { "", "invl", "совм", "категория совместности" },
    { "invl", "incl", "вкл", "говорящий включён (идем, идемте) " },
    { "invl", "excl", "выкл", "говорящий не включён в действие (иди, идите)" },
    { "", "voic", "залог", "категория залога" },
    { "voic", "actv", "действ", "действительный залог" },
    { "voic", "pssv", "страд", "страдательный залог" },
    { "", "infr", "разг", "разговорное" },
    { "", "slng", "жарг", "жаргонное" },
    { "", "arch", "арх", "устаревшее" },
    { "", "litr", "лит", "литературный вариант" },
    { "", "erro", "опеч", "опечатка" },
    { "", "dist", "искаж", "искажение" },
    { "", "ques", "вопр", "вопросительное" },
    { "", "dmns", "указ", "указательное" },
    { "", "prnt", "вводн", "вводное слово" },
    { "", "v-be", "*ье", "форма на -ье" },
    { "", "v-en", "*енен", "форма на -енен" },
    { "", "v-ie", "*ие", "отчество через -ие-" },
    { "", "v-bi", "*ьи", "форма на -ьи" },
    { "", "fimp", "*несов", "деепричастие от глагола несовершенного вида" },
    { "", "prdx", "предк?", "может выступать в роли предикатива" },
    { "", "coun", "счетн", "счётная форма" },
    { "", "coll", "собир", "собирательное числительное" },
    { "", "v-sh", "*ши", "деепричастие на -ши" },
    { "", "af-p", "*предл", "форма после предлога" },
    { "", "inmx", "не/одуш?", "может использоваться как одуш. / неодуш. " },
    { "", "vpre", "в_предл", "вариант предлога ( со, подо, ...)" },
    { "", "anph", "анаф", "анафорическое (местоимение)" },
    { "", "init", "иниц", "инициал" },
    { "", "adjx", "прил?", "может выступать в роли прилагательного" },
};

std::map<std::string, Grammeme> BuildIndex() {
    std::map<std::string, Grammeme> result;

    for (const GrammemeStorage& s : STORAGE) {
		Grammeme g;
            g.parent = s.parent,
            g.name = s.name,
            g.alias = s.alias,
            g.description = s.description,
        result[s.name] = g;
    }

    return result;
}

const std::map<std::string, Grammeme> INDEX_BY_NAME = BuildIndex();

} // namespace

Grammeme FindGrammeme(std::string str) {
    return INDEX_BY_NAME.at(str);
}

} // namespace morphological_analysis
} // namespace linguistic_processor
